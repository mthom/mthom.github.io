<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>Mark Thom: Mark Thom</title>
  <description>Mark Thom: Mark Thom</description>
  <link>http://mthom.github.io/index.html</link>
  <lastBuildDate>Mon, 10 Oct 2016 14:27:38 UT</lastBuildDate>
  <pubDate>Mon, 10 Oct 2016 14:27:38 UT</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>Poor man's dynamic dispatch with types in Shen</title>
   <link>http://mthom.github.io/blog/2016/10/10/poor-man-s-dynamic-dispatch-with-types-in-shen/?utm_source=all&amp;utm_medium=RSS</link>
   <guid>urn:http-mthom-github-io:-blog-2016-10-10-poor-man-s-dynamic-dispatch-with-types-in-shen</guid>
   <pubDate>Mon, 10 Oct 2016 14:27:38 UT</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;&lt;em&gt;DISCLAIMER: In this post I explore an interesting but ill-advised use of Shen&amp;rsquo;s type system. Nothing in it should be taken as an indication of how to write good Shen.&lt;/em&gt;&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;Historically, a lauded feature of Lisp is its extensive support for runtime introspection. Common Lisp makes it easy to tease out properties of programs as first class values, which is especially useful when customizing the behavior of the language to a particular problem domain. The venerable Common Lisp Object System (CLOS) is renown in PL circles for its flexibility and dynamism &amp;mdash; its first implementation was written entirely in the core Common Lisp language.&lt;/p&gt;

&lt;p&gt;From the perspective of a language designer, the downside of extensive introspection support is that makes it much harder to introduce ways of expressing constraints on code into the language. In this post I want to show how we can enable a fast, type-driven, mostly reliable single dispatch mechanism in Shen.&lt;/p&gt;

&lt;h2 id="property-lists-and-effectful-programming-in-the-type-checker"&gt;Property lists and effectful programming in the type checker&lt;/h2&gt;

&lt;p&gt;One feature Shen exhibits from its Lisp heritage is the property list, or plist. A plist is a way of annotating data onto a symbol, which can be associatively read and modified at that symbol, stored as a list of key/value pairs. In chapter 24 of &lt;a href="http://www.gigamonkeys.com/book/"&gt;Practical Common Lisp&lt;/a&gt;, Seibel uses plists to control the expansion of a family of macros at compile time. Shen&amp;rsquo;s property lists can be annotated onto any Shen value, and are documented &lt;a href="http://www.shenlanguage.org/learn-shen/property_lists.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll begin by providing a typed version of Common Lisp&amp;rsquo;s &lt;code&gt;type-of&lt;/code&gt; function. To do this we&amp;rsquo;ll exploit the fact that we have at our disposal most (all?) of the Shen language from within the sequent rules written in any &lt;code&gt;datatype&lt;/code&gt; clause.&lt;/p&gt;

&lt;p&gt;Since Shen is a Lisp, we also have the home advantage of homoiconicity. This means we can intercept any datum put out by the type checker &amp;mdash; itself a Shen value &amp;mdash; and do whatever we like with it in the course of checking that a value inhabits a type.&lt;/p&gt;

&lt;p&gt;So, while verifying that a value &lt;code&gt;X&lt;/code&gt; inhabits a type &lt;code&gt;A&lt;/code&gt;, we&amp;rsquo;ll annotate &lt;code&gt;X&lt;/code&gt;&amp;rsquo;s property list with a representation of its type &lt;code&gt;A&lt;/code&gt; at the key type-rep. We&amp;rsquo;ll reference the value of type-rep when we add dynamic dispatch, but first we need to decide on a mode of representation. For type-reps, we&amp;rsquo;ll use Shen strings.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define string-concat
  { (list string) --&amp;gt; string }
  []  -&amp;gt; ""
  [S] -&amp;gt; S
  [S | Ss] -&amp;gt; (@s S " " (string-concat Ss)))

(define type-&amp;gt;string
  { A --&amp;gt; string }  
  Str -&amp;gt; (make-string "~A" Str))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;make-string&lt;/code&gt; writes a value to a string using the Fortran formatting notation for strings. &lt;code&gt;string-concat&lt;/code&gt; is a simple utility function for concatenating a list of strings together.&lt;/p&gt;

&lt;p&gt;The type theory for type-reps is as follows.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(datatype type-reps
  ______________________________________________
  X : (type-rep A) &amp;gt;&amp;gt; (get X type-rep) : string;

  let Tag (put (eval X) type-rep (type-&amp;gt;string A))
  ________________________________________________
  (tag-value-with-rep X A);

  X : A; (tag-value-with-rep X A);
  ________________________________
  X : (mode (type-rep A) -);)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;ll run down the rules from the top. We consider that any value &lt;code&gt;X&lt;/code&gt; of type &lt;code&gt;A&lt;/code&gt; represents the type of &lt;code&gt;A&lt;/code&gt;; the type &lt;code&gt;(type-rep A)&lt;/code&gt; is nothing other than the type &lt;code&gt;A&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first rule says that if the value &lt;code&gt;X&lt;/code&gt; represents &lt;code&gt;A&lt;/code&gt;, it is annotated with the representation of &lt;code&gt;A&lt;/code&gt; at the key type-rep in its plist, a string.&lt;/p&gt;

&lt;p&gt;The second rule does the work of annotating the plist with the string representation of &lt;code&gt;A&lt;/code&gt; at the key type-rep. Shen values get mangled slightly in the type checker, but the mangling can be undone using the &lt;code&gt;eval&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;The third and final rule checks that &lt;code&gt;X&lt;/code&gt; is of type &lt;code&gt;A&lt;/code&gt; before firing the clause that annotates the plist of &lt;code&gt;X&lt;/code&gt; appropriately. The &lt;code&gt;mode
... -&lt;/code&gt; wrapper is there to prevent the type checker from entering an infinite loop upon encountering some of the more complicated (ie. polymorphic) types native to Shen.&lt;/p&gt;

&lt;p&gt;We are finally ready to give the definition of &lt;code&gt;type-of&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define type-of
  { (type-rep A) --&amp;gt; string }
  X -&amp;gt; (get X type-rep))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;rsquo;s it. All the heavy lifting is done in the type checker. We can test the operation of &lt;code&gt;type-of&lt;/code&gt; on values of various types.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(36+) (type-of 3)
"number" : string

(37+) (type-of "a string")
"string" : string

(38+) (type-of false)
"boolean" : string

(39+) (type-of (@p 3 false [1 2 3] (@v (@v symbols are present &amp;lt;&amp;gt;) &amp;lt;&amp;gt;)))
"(number * (boolean * ((list number) * (vector (vector symbol)))))" : string

(40+) (type-of str)
"(Var17 --&amp;gt; string)" : string&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The function &lt;code&gt;str&lt;/code&gt; has the polymorphic type &lt;code&gt;(A --&amp;gt; string)&lt;/code&gt;, but here a skolemized variable &lt;code&gt;Var17&lt;/code&gt; is leaked out of the type checker. Obviously this poses a serious caveat to dynamic dispatch on polymorphic types. We should be more careful in defining &lt;code&gt;type-&amp;gt;string&lt;/code&gt; after deciding on a format for polymorphic type representation. This seems a job for the (Shen and human) reader and Shen Prolog.&lt;/p&gt;

&lt;h2 id="generic-type-verification"&gt;Generic type verification&lt;/h2&gt;

&lt;p&gt;What we&amp;rsquo;ve developed is a semi-elegant way of implementing generic verified types. In the definition of a Shen function, the expression making up a &lt;code&gt;where&lt;/code&gt; clause is automatically given the type &amp;rsquo;verified&amp;rsquo;, something a Shen programmer can exploit to inject more information into the type theory on a case-driven basis.&lt;/p&gt;

&lt;p&gt;If we lean heavily on the use of verified types, we may soon find we&amp;rsquo;ve overburdened the type checker with many ad hoc rules. Fortunately, we can leverage &lt;code&gt;type-of&lt;/code&gt; to avoid that, at least when dealing with non-polymorphic types.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define has-type?
  { (type-rep A) --&amp;gt; string --&amp;gt; boolean }
  X Type -&amp;gt; (= (type-of X) Type))

(datatype generic-verification
  if (= (type-&amp;gt;string A) Str)
  ______________________________________
  (has-type? X Str) : verified &amp;gt;&amp;gt; X : A;)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;has-type?&lt;/code&gt; checks that &lt;code&gt;X&lt;/code&gt; has the type described in the string, by extracting its type representation from &lt;code&gt;type-of&lt;/code&gt;. The rule in &lt;code&gt;generic-verification&lt;/code&gt; proves that &lt;code&gt;X&lt;/code&gt; has type &lt;code&gt;A&lt;/code&gt; by appealing to the truth of &lt;code&gt;has-type?&lt;/code&gt; on &lt;code&gt;X&lt;/code&gt; and its purported representation &lt;code&gt;Str&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we have type verification &amp;ldquo;for free&amp;rdquo;, at least on arbitrary concrete types, as demonstrated in the stupid and useless function &lt;code&gt;arbitrary-messages&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define arbitrary-messages
  { (type-rep A) --&amp;gt; string }
  X -&amp;gt; (let Y (+ X X) (str Y)) where (has-type? X "number")
  X -&amp;gt; (let Y (@s X X X) Y) where (has-type? X "string")
  X -&amp;gt; (@s "passed a " (type-of X)))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that &lt;code&gt;X&lt;/code&gt; is being typed as a number, as a string, etc. in each of the adjoining clauses, and is treated accordingly. What we&amp;rsquo;ve created is essentially a limited but type safe version of Common Lisp&amp;rsquo;s &lt;code&gt;typecase&lt;/code&gt; macro, without delving into macrology.&lt;/p&gt;

&lt;h1 id="opportunities-and-shortcomings"&gt;Opportunities and Shortcomings&lt;/h1&gt;

&lt;p&gt;We&amp;rsquo;ve mentioned the difficulty in dealing with polymorphic types, but another major shortcoming is that Shen&amp;rsquo;s type system is simply too powerful for this mechanism to work well across all applications. Shen places no restrictions on the number of types or the relations among types that any value may belong to.&lt;/p&gt;

&lt;p&gt;On the bright side, a technique like this could serve as the basis for some form of automatic type-driven single dispatch; think Haskell&amp;rsquo;s typeclasses.&lt;/p&gt;

&lt;h1 id="source-code"&gt;Source code&lt;/h1&gt;

&lt;p&gt;&amp;hellip; is available &lt;a href="https://gist.github.com/mthom/42878af3bf0d51274a2459faac2edaf2"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Shen Kata #1: Type-safe reference cells</title>
   <link>http://mthom.github.io/blog/2015/06/08/shen-kata-1-type-safe-reference-cells/?utm_source=all&amp;utm_medium=RSS</link>
   <guid>urn:http-mthom-github-io:-blog-2015-06-08-shen-kata-1-type-safe-reference-cells</guid>
   <pubDate>Tue, 09 Jun 2015 01:38:12 UT</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;Unlike many other eager, statically typed functional languages that emphasize computing with immutable values, Shen lacks native support for reference cells. Let&amp;rsquo;s add our own.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h2 id="first-class-locally-scoped-mutable-values"&gt;First-class, locally scoped mutable values&lt;/h2&gt;

&lt;p&gt;We can think of a reference cell as a box containing a pointer to a value of any initial type. In ML family languages, reference cells are associated to interfaces similar to that of the Standard ML signature&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;signature REF =
sig
  type 'a ref
  val ref : 'a -&amp;gt; 'a ref
  val writeref : 'a ref -&amp;gt; 'a -&amp;gt; ()
  val readref : 'a ref -&amp;gt; 'a
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;'a ref&lt;/code&gt; is the type of a reference cell, where the ML type &lt;code&gt;'a&lt;/code&gt; is the type of its contents. &lt;code&gt;ref&lt;/code&gt; creates a reference cell containing its parameter value, &lt;code&gt;writeref&lt;/code&gt; replaces the contents of a reference cell with a value of the annotated type of that cell, and &lt;code&gt;readref&lt;/code&gt; extracts the contents of a cell.&lt;/p&gt;

&lt;p&gt;A write made to a reference cell is propagated to all other data structures containing that cell, which is itself an immutable value. In that sense, reference cells are first-class, locally scoped mutable values of the sort we&amp;rsquo;re accustomed to using in imperative languages.&lt;/p&gt;

&lt;p&gt;As in imperative languages, they require a kind of temporal reasoning that is safely neglected when dealing only with immutable values, which is one of the stronger selling points of purely functional languages.&lt;/p&gt;

&lt;p&gt;Why bother with reference cells then? At times, the use of mutation can&amp;rsquo;t be avoided, usually for the sake of efficiency. Some data structures lack fast, purely functional implementations. Others are self-referential and can&amp;rsquo;t otherwise be implemented without resorting to laziness, which comes with its own pitfalls and limitations.&lt;/p&gt;

&lt;h2 id="shen-lacks-reference-cells"&gt;Shen lacks reference cells&lt;/h2&gt;

&lt;p&gt;If Shen provided reference cells natively, there would be no reason to add our own. Any candidate for an ad-hoc reference cell in Shen would have to support mutation already. Shen provides mutable values in two principal ways, through vectors and through global assignments.&lt;/p&gt;

&lt;p&gt;Global assignments are not locally scoped, since they&amp;rsquo;re accessible from anywhere in a Shen program if the name of the assignment is known.&lt;/p&gt;

&lt;p&gt;Shen vectors are first-class, mutable, homogenous containers with a native type theory in line with what we want for ref types, apeing the example of ML. Vectors have the additional property that they may be grown and shrunk an element at a time from the head. In contrast, a reference cell must refer to a single location in memory that persists with the cell, which is to say that an unfettered vector representation allows the programmer to violate core semantic assumptions behind the creation and use of reference cells.&lt;/p&gt;

&lt;h2 id="a-shen-implementation"&gt;A Shen implementation&lt;/h2&gt;

&lt;p&gt;This suggests we should start with vectors as a data representation, and constrain them somehow. One approach is to close two functions over a single cell vector containing an initial value of type &lt;code&gt;A&lt;/code&gt;. This prevents the user of the reference cell from accessing the internal vector representation by any means other than that afforded by the two functions, which we will implement as a getter/setter pair. Following the types in the ML signature, we obtain type signatures for these functions,&lt;/p&gt;

&lt;p&gt;the getter, &lt;code&gt;ref-reader : (one-cell-vector A) --&amp;gt; (lazy A)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and the setter, &lt;code&gt;ref-writer : (one-cell-vector A) --&amp;gt; A --&amp;gt; unit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ref-reader&lt;/code&gt;, given a one-cell vector, returns a value of type &lt;code&gt;(lazy
A)&lt;/code&gt;, whose semantics are identical to a function that takes no arguments.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ref-writer&lt;/code&gt; writes a value of type &lt;code&gt;A&lt;/code&gt; to a one-cell vector.&lt;/p&gt;

&lt;p&gt;Natively, Shen has a vector type &lt;code&gt;(vector A)&lt;/code&gt;, which types a vector of elements of type &lt;code&gt;A&lt;/code&gt;. We have to define the &lt;code&gt;(one-cell-vector A)&lt;/code&gt; type ourselves, which we do using the sequent rules&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; (datatype one-cell-vector
   X : A;
   ________________________________
   (@v X &amp;lt;&amp;gt;) : (one-cell-vector A);

   __________________________________________
   V : (one-cell-vector A) &amp;gt;&amp;gt; V : (vector A);)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we give two rules of inference. The first says that a Shen expression matching the template &lt;code&gt;(@v X &amp;lt;&amp;gt;)&lt;/code&gt; can be inferred to be of type &lt;code&gt;(one-cell-vector A)&lt;/code&gt; if the subexpression &lt;code&gt;X&lt;/code&gt; can be inferred to be of type &lt;code&gt;A&lt;/code&gt;, where &lt;code&gt;A&lt;/code&gt; is a type variable and hence may be substituted for any Shen type (type symbols titled in lower case name concrete types).&lt;/p&gt;

&lt;p&gt;The second rule is subtly different. It says that, if it has been proven that a Shen expression &lt;code&gt;V&lt;/code&gt; is of type &lt;code&gt;(one-cell-vector A)&lt;/code&gt;, (really, &lt;code&gt;V&lt;/code&gt; is a template that may be substituted for any Shen expression), then &lt;code&gt;V&lt;/code&gt; has the type &lt;code&gt;(vector A)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;These rules stringently constrain the number of ways in which we can generate elements of &lt;code&gt;(one-cell-vector A)&lt;/code&gt;. Either we&amp;rsquo;ve called a type-checked function that returns a value of that type, or we&amp;rsquo;ve generated one directly using the &lt;code&gt;(@v X &amp;lt;&amp;gt;)&lt;/code&gt; template, where &lt;code&gt;X&lt;/code&gt; is an expression producing a value of type &lt;code&gt;A&lt;/code&gt;. We could easily enrich the type theory to allow other semantically valid ways of generating one cell vectors, but for our purposes these rules suffice.&lt;/p&gt;

&lt;p&gt;The unit type is pre-defined in Shen, and is uninhabited (no values have the type unit by default). We add our own.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(datatype unit-type
 __________
 [] : unit;)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Equipped with the necessary types, we define the &lt;code&gt;ref-reader&lt;/code&gt; and &lt;code&gt;ref-writer&lt;/code&gt; functions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define ref-reader
  { (one-cell-vector A) --&amp;gt; (lazy A) }
  R -&amp;gt; (freeze (&amp;lt;-vector R 1)))

(define ref-writer
  { (one-cell-vector A) --&amp;gt; A --&amp;gt; unit }
  R X -&amp;gt; (do (vector-&amp;gt; R 1 X) []))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ref-reader&lt;/code&gt; suspends (&amp;ldquo;freezes&amp;rdquo;) a computation on a one cell vector &lt;code&gt;R&lt;/code&gt;, which reads the value of that cell whenever the computation is thawed (Shen vectors are 1-indexed).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ref-writer&lt;/code&gt; sequences two expressions in a &lt;code&gt;do&lt;/code&gt; form. The first writes the value &lt;code&gt;X&lt;/code&gt; to the cell of &lt;code&gt;R&lt;/code&gt;, the second evaluates to unit.&lt;/p&gt;

&lt;p&gt;We now implement &lt;code&gt;ref&lt;/code&gt;, again in keeping with the type given in the ML signature.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define ref
   { A --&amp;gt; (ref A) }
   X -&amp;gt; (let V (@v X &amp;lt;&amp;gt;)
	  (@p (ref-reader V) (ref-writer V))))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Shen, all functions are curried by default, so that the function &lt;code&gt;(ref-writer V)&lt;/code&gt; has type &lt;code&gt;A --&amp;gt; unit&lt;/code&gt;. &lt;code&gt;(ref A)&lt;/code&gt; is defined in the datatype&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(datatype ref-types
   V : (one-cell-vector A);
   _____________________________________________
   (@p (ref-reader V) (ref-writer V)) : (ref A);

   _____________________________________________
   R : (ref A) &amp;gt;&amp;gt; R : ((lazy A) * (A --&amp;gt; unit));)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since in the context of the definition of &lt;code&gt;ref&lt;/code&gt;, we can prove that the expression bound to &lt;code&gt;V&lt;/code&gt; is a one-cell vector, it follows by the first rule that the ordered pair &lt;code&gt;(@p (ref-reader V) (ref-writer V))&lt;/code&gt; inhabits the type &lt;code&gt;(ref A)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second rule says that a value &lt;code&gt;R&lt;/code&gt; known to be of type &lt;code&gt;(ref A)&lt;/code&gt; is an ordered pair in which the first element has type &lt;code&gt;(lazy A)&lt;/code&gt; and the second type &lt;code&gt;(A --&amp;gt; unit)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And that is all. The type rules guarantee that any value proved to be of type &lt;code&gt;(ref A)&lt;/code&gt; is an ordered pair of the reader and writer types, closing over a common one-cell vector, where the reader and writer functions are generated using the &lt;code&gt;ref-reader&lt;/code&gt; and &lt;code&gt;ref-writer&lt;/code&gt; functions. The absence of rules qualifying values of &lt;code&gt;(ref A)&lt;/code&gt; in any other way cause any other attempts to type values as &lt;code&gt;(ref A)&lt;/code&gt; to fail.&lt;/p&gt;

&lt;p&gt;It is now easy to define the Shen versions of the &lt;code&gt;readref&lt;/code&gt; and &lt;code&gt;writeref&lt;/code&gt; functions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define &amp;lt;-r
   { (ref A) --&amp;gt; A }
   R -&amp;gt; (thaw (fst R)))

(define r-&amp;gt;
   { (ref A) --&amp;gt; A --&amp;gt; unit }
   R X -&amp;gt; ((snd R) X))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The functions &lt;code&gt;fst&lt;/code&gt; and &lt;code&gt;snd&lt;/code&gt; project onto the first and second elements of an ordered pair respectively.&lt;/p&gt;

&lt;p&gt;The complete Shen source for the exercise is &lt;a href="https://gist.github.com/mthom/d433b7fdd1455dbec24d"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="example-block-scanner"&gt;Example: block-scanner&lt;/h2&gt;

&lt;p&gt;As an example of reference cells, we adapt the text block scanner closure from Doug Hoyte&amp;rsquo;s book, &lt;a href="http://letoverlambda.com/index.cl/guest/chap2.html#sec_6"&gt;Let Over Lambda&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define char-scanner
  { string --&amp;gt; (ref string) --&amp;gt; string --&amp;gt; unit }
  Trig Curr (@s C Str) -&amp;gt; (char-scanner Trig Curr Str) where (= (&amp;lt;-r Curr) "")
  Trig Curr (@s C Str) -&amp;gt; (do (r-&amp;gt; Curr (if (= (hdstr (&amp;lt;-r Curr)) C)
					       (tlstr (&amp;lt;-r Curr))
					       Trig))
			      (char-scanner Trig Curr Str))
  Trig Curr "" -&amp;gt; [])

(define block-scanner
  { string --&amp;gt; string --&amp;gt; boolean }
  Trig -&amp;gt; (let Curr (ref Trig)
	    (/. DataString
		(do (char-scanner Trig Curr DataString)
		    (= (&amp;lt;-r Curr) "")))))

(set *scanner* (block-scanner "jihad"))

((value *scanner*) "we will start ")
((value *scanner*) "the ji")
((value *scanner*) "had tomorrow.")&lt;/code&gt;&lt;/pre&gt;&lt;/html&gt;</description></item></channel></rss>